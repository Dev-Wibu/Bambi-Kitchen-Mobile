/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateOrder"];
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/order/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["feedback"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllNotifications"];
        put: operations["updateNotification"];
        post: operations["createNotification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inventory-transaction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findById"];
        put: operations["update"];
        post?: never;
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingredient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findAll"];
        put: operations["update_1"];
        post: operations["save"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingredient-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllIngredientCategory"];
        put: operations["updateIngredientCategory"];
        post: operations["createIngredientCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllDishes"];
        put: operations["update_2"];
        /**
         * Sài chung cho create & update, nếu update thì gửi id, còn create thì ko cần
         * @description Tạo món ăn mới kèm nguyên liệu và thông tin chi tiết, gửi kèm 1 map chứa Id Ingredient và số lượng. Account chỉ cần gửi Id, mấy field khác để trống
         */
        post: operations["save_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish/save-custom-dish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["saveCustomDish"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findAll_1"];
        put: operations["update_3"];
        post: operations["save_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findAll_2"];
        put: operations["update_4"];
        post: operations["save_3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendNotificationToUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/send-to-exact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendNotificationToTheExactDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/send-to-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendNotificationToAllUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["registerDeviceToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail/verify-otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["verifyOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail/send-order-mail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendOrderMail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/inventory-transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findAll_3"];
        put?: never;
        post: operations["save_4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gemini/agent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["agentChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findAll_4"];
        put?: never;
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/account/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/{id}/check-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["markAsRead"];
        trace?: never;
    };
    "/dump-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * IMPORTANCE
         * @description CÔNG NGHỆ LÕI CỦA BÀN HỒNG, CHỈ DÙNG KHI CẤP BÁCH
         */
        get: operations["dumpData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/login-with-google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["googleLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["forgotPassword"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/testinventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["testinventory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/order/confirm/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["confirm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/order/cancel/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["canceled"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/demo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["demo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recipe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findAll_5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recipe/by-dish/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findByDishId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/vnpay-return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["handleVnPayReturn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/test-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["testPayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/momo-return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["handleMomoReturn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNotificationById"];
        put?: never;
        post?: never;
        delete: operations["deleteNotification"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/to-account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNotificationByAccountId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail/send-otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sendOTP"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingredient/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findById_1"];
        put?: never;
        post?: never;
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingredient/toggle-active/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["toggleActive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingredient/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ingredient-category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findById_2"];
        put?: never;
        post?: never;
        delete: operations["deleteIngredientCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gemini/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["chat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDishById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish/toggle-public/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["toggleActive_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish/toggle-active/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["toggleInactive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish/account/{accountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDishesByAccountId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish-template/{sizeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findBySizeCode"];
        put?: never;
        post?: never;
        delete: operations["delete_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dish-category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findById_3"];
        put?: never;
        post?: never;
        delete: operations["delete_3"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findById_4"];
        put?: never;
        post?: never;
        delete: operations["delete_4"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/demo/delete-recipe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteRecipe"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OrderUpdateDto: {
            /** Format: int32 */
            orderId?: number;
            comment?: string;
            /** Format: int32 */
            ranking?: number;
        };
        Orders: {
            /** Format: int32 */
            id?: number;
            /** Format: date-time */
            createAt?: string;
            /** Format: double */
            totalPrice?: number;
            /** @enum {string} */
            status?: "PENDING" | "COMPLETED" | "PAID" | "CANCELLED";
            /** Format: int32 */
            userId?: number;
            /** Format: int32 */
            staffId?: number;
            note?: string;
            /** Format: int32 */
            ranking?: number;
            comment?: string;
        };
        Account: {
            /** Format: int32 */
            id?: number;
            name: string;
            /** @enum {string} */
            role: "ADMIN" | "STAFF" | "USER";
            /** Format: date-time */
            createAt?: string;
            /** Format: date-time */
            updateAt?: string;
            password?: string;
            mail: string;
            phone?: string;
            active?: boolean;
        };
        Notification: {
            /** Format: int32 */
            id?: number;
            title?: string;
            message?: string;
            /** Format: date-time */
            createdAt?: string;
            account?: components["schemas"]["Account"];
            read?: boolean;
        };
        Ingredient: {
            /** Format: int32 */
            id?: number;
            name: string;
            category?: components["schemas"]["IngredientCategory"];
            /** @enum {string} */
            unit?: "GRAM" | "KILOGRAM" | "LITER" | "PCS";
            active?: boolean;
            imgUrl?: string;
            publicId?: string;
            /** Format: double */
            quantity?: number;
            /** Format: double */
            reserve?: number;
            /** Format: date-time */
            lastReserveAt?: string;
            /** Format: double */
            available?: number;
            /** Format: double */
            pricePerUnit?: number;
        };
        IngredientCategory: {
            /** Format: int32 */
            id?: number;
            name: string;
            description?: string;
            /** Format: int32 */
            priority?: number;
        };
        InventoryTransaction: {
            /** Format: int32 */
            id?: number;
            ingredient?: components["schemas"]["Ingredient"];
            orders?: components["schemas"]["Orders"];
            /** Format: date-time */
            createAt?: string;
            /** Format: int32 */
            quantity?: number;
            transactionType: boolean;
        };
        IngredientUpdateRequest: {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            categoryId?: number;
            /** @enum {string} */
            unit?: "GRAM" | "KILOGRAM" | "LITER" | "PCS";
            active?: boolean;
            /** Format: double */
            available?: number;
            /** Format: double */
            quantity?: number;
            /** Format: double */
            reserve?: number;
            /** Format: binary */
            file?: string;
        };
        DishUpdateRequest: {
            /** Format: int32 */
            id?: number;
            name?: string;
            description?: string;
            /** Format: int32 */
            price?: number;
            account?: components["schemas"]["Account"];
            /** @enum {string} */
            dishType?: "PRESET" | "CUSTOM";
            /** Format: int32 */
            usedQuantity?: number;
            /** Format: binary */
            file?: string;
            public?: boolean;
            active?: boolean;
        };
        Dish: {
            /** Format: int32 */
            id?: number;
            name?: string;
            description?: string;
            /** Format: int32 */
            price?: number;
            imageUrl?: string;
            publicId?: string;
            account?: components["schemas"]["Account"];
            /** @enum {string} */
            dishType?: "PRESET" | "CUSTOM";
            /** Format: int32 */
            usedQuantity?: number;
            public?: boolean;
            active?: boolean;
        };
        DishCategoryUpdateRequest: {
            /** Format: int32 */
            id: number;
            name: string;
            description?: string;
        };
        DishCategory: {
            /** Format: int32 */
            id?: number;
            name: string;
            description?: string;
        };
        AccountUpdateRequest: {
            /** Format: int32 */
            id: number;
            name: string;
            /** @enum {string} */
            role?: "ADMIN" | "STAFF" | "USER";
            mail?: string;
            phone?: string;
            password?: string;
            active?: boolean;
        };
        LoginRequest: {
            username?: string;
            password?: string;
        };
        DishTemplate: {
            /** @enum {string} */
            size?: "S" | "M" | "L";
            name?: string;
            /** Format: double */
            priceRatio?: number;
            /** Format: double */
            quantityRatio?: number;
            /** Format: int32 */
            max_Carb?: number;
            /** Format: int32 */
            max_Protein?: number;
            /** Format: int32 */
            max_Vegetable?: number;
        };
        MakeOrderRequest: {
            /** Format: int32 */
            accountId?: number;
            paymentMethod?: string;
            note?: string;
            /** Format: double */
            totalPrice?: number;
            items?: components["schemas"]["OrderItemDTO"][];
        };
        OrderItemDTO: {
            /** Format: int32 */
            dishId?: number;
            /** Format: int32 */
            basedOnId?: number;
            name?: string;
            /** Format: int32 */
            quantity?: number;
            note?: string;
            dishTemplate?: components["schemas"]["DishTemplate"];
            recipe?: components["schemas"]["RecipeItemDTO"][];
        };
        RecipeItemDTO: {
            /** Format: int32 */
            ingredientId?: number;
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            sourceType?: "BASE" | "ADDON" | "REMOVED";
        };
        NotificationSendingRequest: {
            title?: string;
            message?: string;
            deviceToken?: string;
            /** Format: int32 */
            userId?: number;
        };
        DishInfo: {
            name?: string;
            /** Format: int32 */
            price?: number;
            ingredients?: {
                [key: string]: number;
            };
        };
        SendOrderEvent: {
            email?: string;
            dishes?: components["schemas"]["DishInfo"][];
        };
        IngredientCreateRequest: {
            name: string;
            /** Format: int32 */
            categoryId: number;
            /** Format: double */
            quantity?: number;
            /** @enum {string} */
            unit: "GRAM" | "KILOGRAM" | "LITER" | "PCS";
            /** Format: double */
            pricePerUnit?: number;
            /** Format: binary */
            file?: string;
        };
        ChatRequest: {
            message?: string;
        };
        DishCreateRequest: {
            /** Format: int32 */
            id?: number;
            name: string;
            description?: string;
            /** Format: int32 */
            price?: number;
            account: components["schemas"]["Account"];
            /** @enum {string} */
            dishType: "PRESET" | "CUSTOM";
            ingredients: {
                [key: string]: number;
            };
            /** Format: binary */
            file?: string;
            public?: boolean;
            active?: boolean;
        };
        DishCategoryCreateRequest: {
            name: string;
            description?: string;
        };
        AccountCreateRequest: {
            name: string;
            mail: string;
            /** @enum {string} */
            role: "ADMIN" | "STAFF" | "USER";
            password: string;
        };
        ApplicationContext: {
            parent?: unknown;
            id?: string;
            displayName?: string;
            autowireCapableBeanFactory?: components["schemas"]["AutowireCapableBeanFactory"];
            applicationName?: string;
            /** Format: int64 */
            startupDate?: number;
            environment?: components["schemas"]["Environment"];
            /** Format: int32 */
            beanDefinitionCount?: number;
            beanDefinitionNames?: string[];
            parentBeanFactory?: components["schemas"]["BeanFactory"];
            classLoader?: {
                name?: string;
                registeredAsParallelCapable?: boolean;
                parent?: {
                    name?: string;
                    registeredAsParallelCapable?: boolean;
                    unnamedModule?: {
                        name?: string;
                        classLoader?: {
                            name?: string;
                            registeredAsParallelCapable?: boolean;
                            definedPackages?: {
                                name?: string;
                                annotations?: unknown[];
                                declaredAnnotations?: unknown[];
                                sealed?: boolean;
                                specificationTitle?: string;
                                specificationVersion?: string;
                                specificationVendor?: string;
                                implementationTitle?: string;
                                implementationVersion?: string;
                                implementationVendor?: string;
                            }[];
                            defaultAssertionStatus?: boolean;
                        };
                        descriptor?: {
                            open?: boolean;
                            automatic?: boolean;
                        };
                        named?: boolean;
                        annotations?: unknown[];
                        declaredAnnotations?: unknown[];
                        packages?: string[];
                        nativeAccessEnabled?: boolean;
                        layer?: unknown;
                    };
                    definedPackages?: {
                        name?: string;
                        annotations?: unknown[];
                        declaredAnnotations?: unknown[];
                        sealed?: boolean;
                        specificationTitle?: string;
                        specificationVersion?: string;
                        specificationVendor?: string;
                        implementationTitle?: string;
                        implementationVersion?: string;
                        implementationVendor?: string;
                    }[];
                    defaultAssertionStatus?: boolean;
                };
                unnamedModule?: {
                    name?: string;
                    classLoader?: {
                        name?: string;
                        registeredAsParallelCapable?: boolean;
                        definedPackages?: {
                            name?: string;
                            annotations?: unknown[];
                            declaredAnnotations?: unknown[];
                            sealed?: boolean;
                            specificationTitle?: string;
                            specificationVersion?: string;
                            specificationVendor?: string;
                            implementationTitle?: string;
                            implementationVersion?: string;
                            implementationVendor?: string;
                        }[];
                        defaultAssertionStatus?: boolean;
                    };
                    descriptor?: {
                        open?: boolean;
                        automatic?: boolean;
                    };
                    named?: boolean;
                    annotations?: unknown[];
                    declaredAnnotations?: unknown[];
                    packages?: string[];
                    nativeAccessEnabled?: boolean;
                    layer?: unknown;
                };
                definedPackages?: {
                    name?: string;
                    annotations?: unknown[];
                    declaredAnnotations?: unknown[];
                    sealed?: boolean;
                    specificationTitle?: string;
                    specificationVersion?: string;
                    specificationVendor?: string;
                    implementationTitle?: string;
                    implementationVersion?: string;
                    implementationVendor?: string;
                }[];
                defaultAssertionStatus?: boolean;
            };
        };
        AutowireCapableBeanFactory: unknown;
        BeanFactory: unknown;
        DefaultHttpStatusCode: components["schemas"]["HttpStatusCode"];
        Environment: {
            activeProfiles?: string[];
            defaultProfiles?: string[];
        };
        FilterRegistration: {
            urlPatternMappings?: string[];
            servletNameMappings?: string[];
            name?: string;
            className?: string;
            initParameters?: {
                [key: string]: string;
            };
        };
        /** @enum {unknown} */
        HttpStatus: "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED";
        HttpStatusCode: {
            error?: boolean;
            is1xxInformational?: boolean;
            is5xxServerError?: boolean;
            is4xxClientError?: boolean;
            is3xxRedirection?: boolean;
            is2xxSuccessful?: boolean;
        };
        JspConfigDescriptor: {
            jspPropertyGroups?: components["schemas"]["JspPropertyGroupDescriptor"][];
            taglibs?: components["schemas"]["TaglibDescriptor"][];
        };
        JspPropertyGroupDescriptor: {
            buffer?: string;
            scriptingInvalid?: string;
            errorOnELNotFound?: string;
            isXml?: string;
            includePreludes?: string[];
            pageEncoding?: string;
            includeCodas?: string[];
            elIgnored?: string;
            deferredSyntaxAllowedAsLiteral?: string;
            trimDirectiveWhitespaces?: string;
            errorOnUndeclaredNamespace?: string;
            defaultContentType?: string;
            urlPatterns?: string[];
        };
        RedirectView: {
            applicationContext?: components["schemas"]["ApplicationContext"];
            servletContext?: components["schemas"]["ServletContext"];
            contentType?: string;
            requestContextAttribute?: string;
            staticAttributes?: {
                [key: string]: unknown;
            };
            exposePathVariables?: boolean;
            exposeContextBeansAsAttributes?: boolean;
            exposedContextBeanNames?: string[];
            beanName?: string;
            url?: string;
            contextRelative?: boolean;
            http10Compatible?: boolean;
            exposeModelAttributes?: boolean;
            encodingScheme?: string;
            statusCode?: components["schemas"]["DefaultHttpStatusCode"] | components["schemas"]["HttpStatus"];
            expandUriTemplateVariables?: boolean;
            propagateQueryParams?: boolean;
            hosts?: string[];
            propagateQueryProperties?: boolean;
            redirectView?: boolean;
            attributesCSV?: string;
            attributes?: {
                [key: string]: string;
            };
            attributesMap?: {
                [key: string]: unknown;
            };
        };
        ServletContext: {
            classLoader?: {
                name?: string;
                registeredAsParallelCapable?: boolean;
                definedPackages?: {
                    name?: string;
                    annotations?: unknown[];
                    declaredAnnotations?: unknown[];
                    sealed?: boolean;
                    specificationTitle?: string;
                    specificationVersion?: string;
                    specificationVendor?: string;
                    implementationTitle?: string;
                    implementationVersion?: string;
                    implementationVendor?: string;
                }[];
                defaultAssertionStatus?: boolean;
            };
            /** Format: int32 */
            majorVersion?: number;
            /** Format: int32 */
            minorVersion?: number;
            attributeNames?: unknown;
            initParameterNames?: unknown;
            contextPath?: string;
            sessionCookieConfig?: components["schemas"]["SessionCookieConfig"];
            virtualServerName?: string;
            /** Format: int32 */
            effectiveMajorVersion?: number;
            servletContextName?: string;
            /** Format: int32 */
            effectiveMinorVersion?: number;
            jspConfigDescriptor?: components["schemas"]["JspConfigDescriptor"];
            filterRegistrations?: {
                [key: string]: components["schemas"]["FilterRegistration"];
            };
            /** Format: int32 */
            sessionTimeout?: number;
            serverInfo?: string;
            sessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
            responseCharacterEncoding?: string;
            effectiveSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
            defaultSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
            requestCharacterEncoding?: string;
            servletRegistrations?: {
                [key: string]: components["schemas"]["ServletRegistration"];
            };
        };
        ServletRegistration: {
            mappings?: string[];
            runAsRole?: string;
            name?: string;
            className?: string;
            initParameters?: {
                [key: string]: string;
            };
        };
        SessionCookieConfig: {
            name?: string;
            path?: string;
            attributes?: {
                [key: string]: string;
            };
            /** @deprecated */
            comment?: string;
            domain?: string;
            /** Format: int32 */
            maxAge?: number;
            secure?: boolean;
            httpOnly?: boolean;
        };
        TaglibDescriptor: {
            taglibLocation?: string;
            taglibURI?: string;
        };
        UserDTO: {
            /** Format: int32 */
            id?: number;
            name?: string;
            /** Format: int32 */
            age?: number;
        };
        WarpResponseUserDTO: {
            /** Format: int32 */
            statusCode?: number;
            message?: string;
            data?: components["schemas"]["UserDTO"];
        };
        Recipe: {
            /** Format: int32 */
            id?: number;
            ingredient?: components["schemas"]["Ingredient"];
            /** Format: int32 */
            quantity?: number;
            dish?: components["schemas"]["Dish"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Orders"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MakeOrderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    feedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderUpdateDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Orders"];
                };
            };
        };
    };
    getAllNotifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notification"][];
                };
            };
        };
    };
    updateNotification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notification"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notification"];
                };
            };
        };
    };
    createNotification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notification"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notification"];
                };
            };
        };
    };
    findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InventoryTransaction"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InventoryTransaction"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InventoryTransaction"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Ingredient"][];
                };
            };
        };
    };
    update_1: {
        parameters: {
            query: {
                ingredient: components["schemas"]["IngredientUpdateRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Ingredient"];
                };
            };
        };
    };
    save: {
        parameters: {
            query: {
                ingredient: components["schemas"]["IngredientCreateRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Ingredient"];
                };
            };
        };
    };
    getAllIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IngredientCategory"][];
                };
            };
        };
    };
    updateIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientCategory"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IngredientCategory"];
                };
            };
        };
    };
    createIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientCategory"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IngredientCategory"];
                };
            };
        };
    };
    getAllDishes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dish"][];
                };
            };
        };
    };
    update_2: {
        parameters: {
            query: {
                request: components["schemas"]["DishUpdateRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dish"];
                };
            };
        };
    };
    save_1: {
        parameters: {
            query: {
                request: components["schemas"]["DishCreateRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dish"];
                };
            };
        };
    };
    saveCustomDish: {
        parameters: {
            query: {
                id: number;
                isPublic: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findAll_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishCategory"][];
                };
            };
        };
    };
    update_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DishCategoryUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishCategory"];
                };
            };
        };
    };
    save_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DishCategoryCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishCategory"];
                };
            };
        };
    };
    findAll_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Account"][];
                };
            };
        };
    };
    update_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Account"];
                };
            };
        };
    };
    save_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Account"];
                };
            };
        };
    };
    resetPassword: {
        parameters: {
            query: {
                otp: string;
                email: string;
                newPassword: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    sendNotificationToUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationSendingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    sendNotificationToTheExactDevice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationSendingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    sendNotificationToAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationSendingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    registerDeviceToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": "ANDROID" | "WEB" | "IOS";
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    verifyOtp: {
        parameters: {
            query: {
                email: string;
                otp: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    sendOrderMail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendOrderEvent"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findAll_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InventoryTransaction"][];
                };
            };
        };
    };
    save_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InventoryTransaction"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InventoryTransaction"];
                };
            };
        };
    };
    agentChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    findAll_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishTemplate"][];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DishTemplate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishTemplate"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Account"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Account"];
                };
            };
        };
    };
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dumpData: {
        parameters: {
            query: {
                password: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    googleLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RedirectView"];
                };
            };
        };
    };
    forgotPassword: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    testinventory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    confirm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    canceled: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    demo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WarpResponseUserDTO"];
                };
            };
        };
    };
    findAll_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Recipe"][];
                };
            };
        };
    };
    findByDishId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Recipe"][];
                };
            };
        };
    };
    handleVnPayReturn: {
        parameters: {
            query: {
                params: {
                    [key: string]: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    testPayment: {
        parameters: {
            query: {
                paymentMethodName: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    handleMomoReturn: {
        parameters: {
            query: {
                params: {
                    [key: string]: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    getNotificationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notification"];
                };
            };
        };
    };
    deleteNotification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNotificationByAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notification"][];
                };
            };
        };
    };
    sendOTP: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    findById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Ingredient"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    toggleActive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    findByName: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Ingredient"];
                };
            };
        };
    };
    findById_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IngredientCategory"];
                };
            };
        };
    };
    deleteIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    chat: {
        parameters: {
            query: {
                message: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getDishById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dish"];
                };
            };
        };
    };
    toggleActive_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    toggleInactive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    getDishesByAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accountId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dish"][];
                };
            };
        };
    };
    findBySizeCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sizeCode: "S" | "M" | "L";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishTemplate"];
                };
            };
        };
    };
    delete_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sizeCode: "S" | "M" | "L";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findById_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DishCategory"];
                };
            };
        };
    };
    delete_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    findById_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Account"];
                };
            };
        };
    };
    delete_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    deleteRecipe: {
        parameters: {
            query: {
                DishId: number;
                IngredientId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
